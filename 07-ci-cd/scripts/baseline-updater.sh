#!/bin/bash

# Baseline Updater Script
# –û–±–Ω–æ–≤–ª—è–µ—Ç baseline –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASELINE_DIR="${BASELINE_DIR:-baselines}"
IMPROVEMENT_THRESHOLD="${IMPROVEMENT_THRESHOLD:-5}"  # 5% —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è baseline
BACKUP_COUNT="${BACKUP_COUNT:-5}"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤

echo -e "${PURPLE}üéØ Baseline Performance Updater${NC}"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò] CURRENT_RESULTS_FILE

–û–±–Ω–æ–≤–ª—è–µ—Ç baseline –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–û–ü–¶–ò–ò:
    -h, --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -d, --baseline-dir DIR  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è baseline —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: baselines)
    -t, --threshold PERCENT –ü–æ—Ä–æ–≥ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è baseline –≤ % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)
    -f, --force            –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å baseline –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
    --dry-run              –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    --backup-count N       –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)

–ü–†–ò–ú–ï–†–´:
    $0 current-results.json
    $0 --threshold 10 --dry-run results.json
    $0 --force --baseline-dir ./perf-baselines results.json

–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:
    BASELINE_DIR           –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è baseline —Ñ–∞–π–ª–æ–≤
    IMPROVEMENT_THRESHOLD  –ü–æ—Ä–æ–≥ —É–ª—É—á—à–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    BACKUP_COUNT          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
EOF
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
DRY_RUN=false
FORCE_UPDATE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--baseline-dir)
            BASELINE_DIR="$2"
            shift 2
            ;;
        -t|--threshold)
            IMPROVEMENT_THRESHOLD="$2"
            shift 2
            ;;
        -f|--force)
            FORCE_UPDATE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --backup-count)
            BACKUP_COUNT="$2"
            shift 2
            ;;
        -*)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1${NC}"
            show_help
            exit 1
            ;;
        *)
            CURRENT_RESULTS="$1"
            shift
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if [ -z "$CURRENT_RESULTS" ]; then
    echo -e "${RED}‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏${NC}"
    show_help
    exit 1
fi

if [ ! -f "$CURRENT_RESULTS" ]; then
    echo -e "${RED}‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CURRENT_RESULTS${NC}"
    exit 1
fi

echo -e "${BLUE}üìÅ Baseline directory: $BASELINE_DIR${NC}"
echo -e "${BLUE}üìä Current results: $CURRENT_RESULTS${NC}"
echo -e "${BLUE}‚ö° Improvement threshold: $IMPROVEMENT_THRESHOLD%${NC}"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è baseline –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p "$BASELINE_DIR"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ baseline —Ñ–∞–π–ª
determine_baseline_file() {
    local results_file="$1"
    local filename=$(basename "$results_file")

    case "$filename" in
        *jmh*|*JMH*)
            echo "$BASELINE_DIR/jmh-baseline.json"
            ;;
        *android*|*Android*)
            echo "$BASELINE_DIR/android-baseline.json"
            ;;
        *jvm*|*JVM*)
            echo "$BASELINE_DIR/jvm-baseline.json"
            ;;
        *js*|*JS*)
            echo "$BASELINE_DIR/js-baseline.json"
            ;;
        *native*|*Native*)
            echo "$BASELINE_DIR/native-baseline.json"
            ;;
        *)
            echo "$BASELINE_DIR/default-baseline.json"
            ;;
    esac
}

BASELINE_FILE=$(determine_baseline_file "$CURRENT_RESULTS")
echo -e "${BLUE}üìã Baseline file: $BASELINE_FILE${NC}"

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup
create_backup() {
    local file="$1"

    if [ -f "$file" ]; then
        local timestamp=$(date +%Y%m%d_%H%M%S)
        local backup_file="${file}.backup_${timestamp}"

        echo -e "${YELLOW}üíæ Creating backup: $backup_file${NC}"
        cp "$file" "$backup_file"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ backup —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
        local backup_pattern="${file}.backup_*"
        local backup_files=($(ls -t $backup_pattern 2>/dev/null || true))

        if [ ${#backup_files[@]} -gt $BACKUP_COUNT ]; then
            echo -e "${YELLOW}üßπ Cleaning old backups (keeping $BACKUP_COUNT)${NC}"
            for ((i=$BACKUP_COUNT; i<${#backup_files[@]}; i++)); do
                echo -e "  Removing: ${backup_files[$i]}"
                if [ "$DRY_RUN" = false ]; then
                    rm -f "${backup_files[$i]}"
                fi
            done
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
compare_performance() {
    local current_file="$1"
    local baseline_file="$2"

    if [ ! -f "$baseline_file" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Baseline file not found, creating new baseline${NC}"
        return 0  # –ù–æ–≤—ã–π baseline
    fi

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    local comparison_script="$(dirname "$0")/performance-comparison.py"

    if [ -f "$comparison_script" ]; then
        echo -e "${BLUE}üìä Comparing performance with baseline...${NC}"

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        local temp_comparison=$(mktemp)

        python3 "$comparison_script" \
            "$baseline_file" \
            "$current_file" \
            --format json \
            --warning-threshold 10 \
            --critical-threshold 30 \
            --output "$temp_comparison" 2>/dev/null || {
            echo -e "${YELLOW}‚ö†Ô∏è Could not compare with baseline (using simple update)${NC}"
            rm -f "$temp_comparison"
            return 0
        }

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        local improvements=$(python3 -c "
import json
import sys
try:
    with open('$temp_comparison', 'r') as f:
        data = json.load(f)

    improvements = [c for c in data['comparisons'] if c['is_improvement']]
    significant_improvements = [c for c in improvements if abs(c['change_percent']) >= $IMPROVEMENT_THRESHOLD]

    print(f'{len(significant_improvements)} {len(improvements)} {len(data[\"comparisons\"])}')
except:
    print('0 0 0')
")

        read significant_count total_improvements total_benchmarks <<< "$improvements"

        rm -f "$temp_comparison"

        echo -e "${GREEN}‚úÖ Performance comparison completed:${NC}"
        echo -e "  Total benchmarks: $total_benchmarks"
        echo -e "  Total improvements: $total_improvements"
        echo -e "  Significant improvements (‚â•$IMPROVEMENT_THRESHOLD%): $significant_count"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å baseline
        if [ "$significant_count" -gt 0 ] || [ "$FORCE_UPDATE" = true ]; then
            return 0  # –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        else
            return 1  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Performance comparison script not found, updating baseline${NC}"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON
validate_json() {
    local file="$1"

    python3 -c "
import json
import sys

try:
    with open('$file', 'r') as f:
        json.load(f)
    print('valid')
except:
    print('invalid')
" 2>/dev/null
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
get_results_stats() {
    local file="$1"

    python3 -c "
import json
import sys

try:
    with open('$file', 'r') as f:
        data = json.load(f)

    if isinstance(data, list):
        # JMH format
        print(f'JMH results: {len(data)} benchmarks')
    elif isinstance(data, dict):
        if 'benchmarks' in data:
            # Android Benchmark format
            print(f'Android results: {len(data[\"benchmarks\"])} benchmarks')
        elif 'results' in data:
            # kotlinx.benchmark format
            print(f'Kotlin results: {len(data[\"results\"])} benchmarks')
        else:
            print('Unknown format')
    else:
        print('Invalid format')
except Exception as e:
    print(f'Error: {e}')
"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
echo ""
echo -e "${BLUE}üîç Analyzing current results...${NC}"

# –í–∞–ª–∏–¥–∏—Ä—É–µ–º JSON
json_status=$(validate_json "$CURRENT_RESULTS")
if [ "$json_status" != "valid" ]; then
    echo -e "${RED}‚ùå Invalid JSON in current results file${NC}"
    exit 1
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
current_stats=$(get_results_stats "$CURRENT_RESULTS")
echo -e "${GREEN}üìä $current_stats${NC}"

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å baseline
echo ""
if compare_performance "$CURRENT_RESULTS" "$BASELINE_FILE"; then
    echo -e "${GREEN}üéØ Baseline update is recommended${NC}"

    if [ "$DRY_RUN" = true ]; then
        echo -e "${YELLOW}üîç DRY RUN: Would update baseline file: $BASELINE_FILE${NC}"
        if [ -f "$BASELINE_FILE" ]; then
            echo -e "${YELLOW}üîç DRY RUN: Would create backup of existing baseline${NC}"
        fi
    else
        # –°–æ–∑–¥–∞–µ–º backup —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ baseline
        create_backup "$BASELINE_FILE"

        # –û–±–Ω–æ–≤–ª—è–µ–º baseline
        echo -e "${GREEN}üìù Updating baseline...${NC}"
        cp "$CURRENT_RESULTS" "$BASELINE_FILE"

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        python3 -c "
import json
import sys
from datetime import datetime

try:
    with open('$BASELINE_FILE', 'r') as f:
        data = json.load(f)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ baseline
    metadata = {
        'baseline_updated': datetime.now().isoformat(),
        'source_file': '$CURRENT_RESULTS',
        'improvement_threshold': $IMPROVEMENT_THRESHOLD,
        'updated_by': 'baseline-updater.sh'
    }

    if isinstance(data, dict):
        data['baseline_metadata'] = metadata
    else:
        # –î–ª—è —Å–ø–∏—Å–∫–æ–≤ —Å–æ–∑–¥–∞–µ–º wrapper
        data = {
            'results': data,
            'baseline_metadata': metadata
        }

    with open('$BASELINE_FILE', 'w') as f:
        json.dump(data, f, indent=2)

    print('‚úÖ Metadata added to baseline')
except Exception as e:
    print(f'‚ö†Ô∏è Could not add metadata: {e}')
"

        echo -e "${GREEN}‚úÖ Baseline updated successfully!${NC}"
        echo -e "${BLUE}üìÅ New baseline: $BASELINE_FILE${NC}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ–≥–æ baseline
        baseline_stats=$(get_results_stats "$BASELINE_FILE")
        echo -e "${GREEN}üìä $baseline_stats${NC}"
    fi

elif [ "$FORCE_UPDATE" = true ]; then
    echo -e "${YELLOW}‚ö° Force update requested${NC}"

    if [ "$DRY_RUN" = true ]; then
        echo -e "${YELLOW}üîç DRY RUN: Would force update baseline${NC}"
    else
        create_backup "$BASELINE_FILE"
        cp "$CURRENT_RESULTS" "$BASELINE_FILE"
        echo -e "${GREEN}‚úÖ Baseline force updated!${NC}"
    fi

else
    echo -e "${BLUE}üìä No significant improvements detected${NC}"
    echo -e "${BLUE}üí° Current baseline is still optimal${NC}"

    if [ ! -f "$BASELINE_FILE" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è But baseline file doesn't exist, creating initial baseline${NC}"

        if [ "$DRY_RUN" = false ]; then
            cp "$CURRENT_RESULTS" "$BASELINE_FILE"
            echo -e "${GREEN}‚úÖ Initial baseline created${NC}"
        fi
    fi
fi

echo ""
echo -e "${PURPLE}üìã Summary:${NC}"
echo -e "  Current results: ${GREEN}$(basename "$CURRENT_RESULTS")${NC}"
echo -e "  Baseline file: ${GREEN}$(basename "$BASELINE_FILE")${NC}"
echo -e "  Improvement threshold: ${BLUE}$IMPROVEMENT_THRESHOLD%${NC}"

if [ -f "$BASELINE_FILE" ]; then
    echo -e "  Baseline last modified: ${BLUE}$(stat -f %Sm "$BASELINE_FILE" 2>/dev/null || date -r "$BASELINE_FILE" 2>/dev/null || echo "Unknown")${NC}"
fi

if [ "$DRY_RUN" = true ]; then
    echo -e "  ${YELLOW}üîç DRY RUN MODE - No changes made${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Baseline update process completed!${NC}"