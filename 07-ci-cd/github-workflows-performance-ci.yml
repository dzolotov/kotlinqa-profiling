name: üöÄ Performance CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00 UTC)
    - cron: '0 2 * * 0'

env:
  # –ü–æ—Ä–æ–≥–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  PERFORMANCE_THRESHOLD: "120%"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ 20%
  ALERT_THRESHOLD: "150%"        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ 50%

  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Android
  ANDROID_COMPILE_SDK: "34"
  ANDROID_MIN_SDK: "24"
  ANDROID_TARGET_SDK: "34"

jobs:
  # –ú–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
  kotlin-multiplatform-benchmarks:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        kotlin-target: [jvm, js, native]
        exclude:
          # JS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ Windows –≤ –Ω–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          - os: windows-latest
            kotlin-target: js
          # Native –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö OS
          - os: ubuntu-latest
            kotlin-target: native
          - os: windows-latest
            kotlin-target: native

    runs-on: ${{ matrix.os }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üêò Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: üîß Make gradlew executable
        run: chmod +x ./gradlew
        if: runner.os != 'Windows'

      - name: üèóÔ∏è Build project
        run: ./gradlew build -x test

      - name: üèÉ‚Äç‚ôÇÔ∏è Run ${{ matrix.kotlin-target }} benchmarks
        run: |
          case "${{ matrix.kotlin-target }}" in
            "jvm")
              ./gradlew jvmBenchmark --info
              ;;
            "js")
              ./gradlew jsBenchmark --info
              ;;
            "native")
              ./gradlew nativeBenchmark --info
              ;;
          esac

      - name: üìä Process benchmark results
        run: |
          # –°–æ–∑–¥–∞–µ–º unified —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          mkdir -p build/ci-reports/
          echo "Processing ${{ matrix.kotlin-target }} benchmarks on ${{ matrix.os }}"

          # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          if [ -d "build/reports/benchmarks/" ]; then
            cp -r build/reports/benchmarks/* build/ci-reports/
            echo "Benchmark results processed successfully"
          else
            echo "No benchmark results found"
          fi

      - name: üìà Store benchmark data
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          tool: 'customSmallerIsBetter'
          output-file-path: build/ci-reports/${{ matrix.kotlin-target }}.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: ${{ env.PERFORMANCE_THRESHOLD }}
          comment-on-alert: true
          fail-on-alert: false
          benchmark-data-dir-path: "benchmarks/${{ matrix.kotlin-target }}/${{ matrix.os }}"

      - name: üéØ Upload benchmark artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-${{ matrix.kotlin-target }}-${{ matrix.os }}
          path: build/ci-reports/
          retention-days: 30

  # Android –±–µ–Ω—á–º–∞—Ä–∫–∏ —Å —ç–º—É–ª—è—Ç–æ—Ä–æ–º
  android-performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üîß Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: üì± Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üêò Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: üèóÔ∏è Build Android app
        run: |
          ./gradlew assembleRelease assembleAndroidTest
          ./gradlew assembleBenchmark assembleBenchmarkAndroidTest

      - name: üì± Run Android benchmarks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          cores: 2
          ram-size: 4096M
          heap-size: 512M
          script: |
            echo "Running Android Jetpack Benchmarks..."

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è CI –æ–∫—Ä—É–∂–µ–Ω–∏—è
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0

            # –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ–±–µ–Ω—á–º–∞—Ä–∫–æ–≤
            ./gradlew benchmark:connectedAndroidTest \
              -Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.suppressErrors=EMULATOR,LOW-BATTERY \
              --info

            # –ó–∞–ø—É—Å–∫ –º–∞–∫—Ä–æ–±–µ–Ω—á–º–∞—Ä–∫–æ–≤
            ./gradlew macrobenchmark:connectedAndroidTest \
              -Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.suppressErrors=EMULATOR,LOW-BATTERY \
              --info

      - name: üìä Extract benchmark traces
        if: always()
        run: |
          echo "Extracting benchmark artifacts from device..."
          adb shell ls /sdcard/Android/media/*/additional_test_output/ || echo "No benchmark outputs found"

          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          mkdir -p build/android-benchmark-results/

          # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          adb pull /sdcard/Android/media/ build/android-benchmark-results/ || echo "Could not pull media files"

          # –ò–∑–≤–ª–µ–∫–∞–µ–º trace —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          adb shell find /sdcard/Android/media/ -name "*.json" -o -name "*.trace" -o -name "*.perfetto-trace" | \
            while read file; do
              echo "Found: $file"
              adb pull "$file" build/android-benchmark-results/ || true
            done

      - name: üéØ Upload Android benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-benchmark-results
          path: |
            build/android-benchmark-results/
            benchmark/build/outputs/androidTest-results/
            macrobenchmark/build/outputs/androidTest-results/
          retention-days: 30

  # JMH –±–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  jmh-deep-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üêò Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: üèÉ‚Äç‚ôÇÔ∏è Run JMH benchmarks
        run: |
          # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º JMH jar
          ./gradlew jmhJar

          # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
          java -jar build/libs/jmh.jar \
            -wi 3 \
            -i 5 \
            -f 1 \
            -r 1s \
            -w 1s \
            -rf json \
            -rff build/jmh-results.json \
            -v EXTRA

      - name: üìä Process JMH results
        run: |
          echo "JMH Results Summary:"
          if [ -f "build/jmh-results.json" ]; then
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ JMH
            python3 -c "
            import json
            import sys

            try:
                with open('build/jmh-results.json', 'r') as f:
                    data = json.load(f)

                print('\\nüìà JMH Benchmark Results:')
                print('=' * 50)

                for result in data:
                    benchmark = result['benchmark']
                    score = result['primaryMetric']['score']
                    unit = result['primaryMetric']['scoreUnit']
                    error = result['primaryMetric']['scoreError']

                    print(f'{benchmark}:')
                    print(f'  Score: {score:.2f} ¬± {error:.2f} {unit}')
                    print(f'  Mode: {result[\"mode\"]}')
                    print()

            except Exception as e:
                print(f'Error parsing JMH results: {e}')
                sys.exit(1)
            "
          else
            echo "‚ùå No JMH results file found"
          fi

      - name: üéØ Upload JMH results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jmh-benchmark-results
          path: |
            build/jmh-results.json
            build/libs/jmh.jar
          retention-days: 30

  # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–≥—Ä–µ—Å—Å–∏–π
  performance-report:
    needs: [kotlin-multiplatform-benchmarks, android-performance-tests, jmh-deep-analysis]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: üìä Generate performance report
        run: |
          echo "# üöÄ Performance Test Report" > performance-report.md
          echo "" >> performance-report.md
          echo "**Build**: \`${{ github.sha }}\`" >> performance-report.md
          echo "**Branch**: \`${{ github.ref_name }}\`" >> performance-report.md
          echo "**Workflow**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> performance-report.md
          echo "" >> performance-report.md

          echo "## üìã Test Summary" >> performance-report.md
          echo "" >> performance-report.md

          # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
          KOTLIN_ARTIFACTS=$(ls artifacts/ | grep "benchmark-" | wc -l)
          ANDROID_ARTIFACTS=$(ls artifacts/ | grep "android" | wc -l)
          JMH_ARTIFACTS=$(ls artifacts/ | grep "jmh" | wc -l)

          echo "- ‚úÖ Kotlin Multiplatform: $KOTLIN_ARTIFACTS targets tested" >> performance-report.md
          echo "- üì± Android Benchmarks: $ANDROID_ARTIFACTS test suites" >> performance-report.md
          echo "- ‚ö° JMH Deep Analysis: $JMH_ARTIFACTS detailed reports" >> performance-report.md
          echo "" >> performance-report.md

          echo "## üìä Artifacts Generated" >> performance-report.md
          echo "" >> performance-report.md
          echo "All benchmark data has been collected and is available for analysis:" >> performance-report.md
          echo "" >> performance-report.md

          for artifact in artifacts/*/; do
            if [ -d "$artifact" ]; then
              artifact_name=$(basename "$artifact")
              file_count=$(find "$artifact" -type f | wc -l)
              echo "- \`$artifact_name\`: $file_count files" >> performance-report.md
            fi
          done

          echo "" >> performance-report.md
          echo "## üéØ Next Steps" >> performance-report.md
          echo "" >> performance-report.md
          echo "1. Download artifacts from this workflow run" >> performance-report.md
          echo "2. Analyze performance trends using benchmark data" >> performance-report.md
          echo "3. Compare results with baseline performance" >> performance-report.md
          echo "4. Address any performance regressions identified" >> performance-report.md

      - name: üìù Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md
          retention-days: 90

      - name: üí¨ Comment PR with results (if PR)
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  performance-alerts:
    needs: [kotlin-multiplatform-benchmarks, android-performance-tests, jmh-deep-analysis]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: üö® Send performance alert
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'üö® Performance Regression Detected';
            const body = `
            ## Performance Alert

            Critical performance regression detected in main branch.

            **Details:**
            - Commit: ${context.sha}
            - Workflow: [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - Branch: ${context.ref}

            **Action Required:**
            1. Review the failing benchmark results
            2. Identify the cause of performance degradation
            3. Create a fix or rollback the changes

            This issue was created automatically by the Performance CI pipeline.
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['performance', 'regression', 'priority-high']
            });