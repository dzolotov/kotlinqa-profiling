// Jenkins Pipeline –¥–ª—è Performance Testing
// –§–∞–π–ª: Jenkinsfile

pipeline {
    agent {
        label 'kotlin-performance' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç—ã —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pipeline
    options {
        // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–±–æ—Ä–æ–∫
        buildDiscarder(logRotator(numToKeepStr: '10'))

        // Timeout –¥–ª—è –≤—Å–µ–≥–æ pipeline (45 –º–∏–Ω—É—Ç)
        timeout(time: 45, unit: 'MINUTES')

        // –û—Ç–º–µ—á–∞–µ–º build –∫–∞–∫ unstable –≤–º–µ—Å—Ç–æ failed –ø—Ä–∏ performance regression
        skipDefaultCheckout false

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤
        parallelsAlwaysFailFast false
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    parameters {
        choice(
            name: 'BENCHMARK_TYPE',
            choices: ['all', 'jvm-only', 'android-only', 'jmh-only'],
            description: '–¢–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞'
        )

        booleanParam(
            name: 'PERFORMANCE_STRICT_MODE',
            defaultValue: false,
            description: '–°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: fail –ø—Ä–∏ –ª—é–±–æ–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–∏'
        )

        string(
            name: 'PERFORMANCE_THRESHOLD',
            defaultValue: '120',
            description: '–ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ % (120 = 20% –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ)'
        )
    }

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    environment {
        // Java –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        JAVA_HOME = tool('OpenJDK-17')
        PATH = "${JAVA_HOME}/bin:${env.PATH}"

        // Gradle –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        GRADLE_OPTS = '-Dorg.gradle.daemon=false -Xmx3g -XX:MaxMetaspaceSize=512m'
        GRADLE_USER_HOME = "${WORKSPACE}/.gradle"

        // Android –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ANDROID_HOME = '/opt/android-sdk'
        ANDROID_COMPILE_SDK = '34'

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        PERFORMANCE_THRESHOLD = "${params.PERFORMANCE_THRESHOLD}"

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
        REPORTS_DIR = "${WORKSPACE}/performance-reports"
    }

    stages {
        stage('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞') {
            steps {
                script {
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ build
                    echo "üöÄ Starting Performance Testing Pipeline"
                    echo "Branch: ${env.BRANCH_NAME}"
                    echo "Build: ${env.BUILD_NUMBER}"
                    echo "Parameters: ${params}"

                    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
                    sh '''
                        mkdir -p ${REPORTS_DIR}
                        mkdir -p ${REPORTS_DIR}/jvm
                        mkdir -p ${REPORTS_DIR}/android
                        mkdir -p ${REPORTS_DIR}/jmh
                    '''
                }

                // Checkout —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
            }
        }

        stage('–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞') {
            steps {
                script {
                    echo "üèóÔ∏è Building project..."
                }

                sh '''
                    chmod +x ./gradlew
                    ./gradlew clean build -x test --info --stacktrace
                '''
            }

            post {
                always {
                    // –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
                    publishTestResults testResultsPattern: 'build/test-results/test/TEST-*.xml'
                }
            }
        }

        stage('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏') {
            parallel {
                stage('JVM/JS/Native –ë–µ–Ω—á–º–∞—Ä–∫–∏') {
                    when {
                        anyOf {
                            expression { params.BENCHMARK_TYPE == 'all' }
                            expression { params.BENCHMARK_TYPE == 'jvm-only' }
                        }
                    }

                    steps {
                        script {
                            echo "‚òï Running Kotlin Multiplatform benchmarks..."
                        }

                        sh '''
                            # JVM –±–µ–Ω—á–º–∞—Ä–∫–∏
                            echo "Running JVM benchmarks..."
                            ./gradlew jvmBenchmark --info || echo "JVM benchmarks failed"

                            # JS –±–µ–Ω—á–º–∞—Ä–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏)
                            echo "Running JS benchmarks..."
                            ./gradlew jsBenchmark --info || echo "JS benchmarks failed (expected in some environments)"

                            # Native –±–µ–Ω—á–º–∞—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ Linux)
                            if [[ "$OSTYPE" == "linux-gnu"* ]]; then
                                echo "Running Native benchmarks..."
                                ./gradlew nativeBenchmark --info || echo "Native benchmarks failed"
                            else
                                echo "Skipping Native benchmarks (not Linux)"
                            fi
                        '''

                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        sh '''
                            echo "Processing JVM benchmark results..."

                            # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            if [ -d "build/reports/benchmarks" ]; then
                                cp -r build/reports/benchmarks/* ${REPORTS_DIR}/jvm/ || echo "No JVM results to copy"
                            fi

                            # –°–æ–∑–¥–∞–µ–º summary
                            find build/reports/benchmarks -name "*.json" -exec echo "Found benchmark result: {}" \\;
                        '''
                    }

                    post {
                        always {
                            // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã JVM –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
                            archiveArtifacts(
                                artifacts: 'build/reports/benchmarks/**/*',
                                allowEmptyArchive: true,
                                fingerprint: true
                            )
                        }
                    }
                }

                stage('Android –ë–µ–Ω—á–º–∞—Ä–∫–∏') {
                    when {
                        anyOf {
                            expression { params.BENCHMARK_TYPE == 'all' }
                            expression { params.BENCHMARK_TYPE == 'android-only' }
                        }
                    }

                    agent {
                        label 'android-emulator' // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Å Android SDK
                    }

                    steps {
                        script {
                            echo "üì± Running Android performance tests..."
                        }

                        // –°–±–æ—Ä–∫–∞ Android –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                        sh '''
                            echo "Building Android components..."
                            ./gradlew assembleRelease assembleAndroidTest
                            ./gradlew assembleBenchmark assembleBenchmarkAndroidTest
                        '''

                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Android –æ–∫—Ä—É–∂–µ–Ω–∏—è
                        sh '''
                            echo "Checking Android environment..."
                            echo "ANDROID_HOME: $ANDROID_HOME"

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ADB
                            if command -v adb &> /dev/null; then
                                adb version
                                adb devices
                            else
                                echo "‚ùå ADB not found - Android tests may fail"
                            fi
                        '''

                        // –ó–∞–ø—É—Å–∫ Android –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
                        sh '''
                            echo "Running Android benchmarks..."

                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è CI –æ–∫—Ä—É–∂–µ–Ω–∏—è
                            if adb devices | grep -q "device"; then
                                echo "üì± Android device found - configuring for benchmarks"

                                # –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
                                adb shell settings put global window_animation_scale 0 || true
                                adb shell settings put global transition_animation_scale 0 || true
                                adb shell settings put global animator_duration_scale 0 || true

                                # –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ–±–µ–Ω—á–º–∞—Ä–∫–æ–≤
                                ./gradlew benchmark:connectedAndroidTest \\
                                    -Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.suppressErrors=EMULATOR,LOW-BATTERY,UNLOCKED \\
                                    --info || echo "Microbenchmarks completed with warnings"

                                # –ó–∞–ø—É—Å–∫ –º–∞–∫—Ä–æ–±–µ–Ω—á–º–∞—Ä–∫–æ–≤
                                ./gradlew macrobenchmark:connectedAndroidTest \\
                                    -Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.suppressErrors=EMULATOR,LOW-BATTERY,UNLOCKED \\
                                    --info || echo "Macrobenchmarks completed with warnings"

                                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ trace —Ñ–∞–π–ª–æ–≤
                                echo "Extracting benchmark traces..."
                                mkdir -p ${REPORTS_DIR}/android/traces

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ benchmark –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                                adb shell ls /sdcard/Android/media/*/additional_test_output/ || echo "No benchmark outputs found on device"

                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã
                                adb pull /sdcard/Android/media/ ${REPORTS_DIR}/android/traces/ || echo "Could not extract trace files"

                            else
                                echo "‚ùå No Android device available - skipping connected tests"

                                # –ú–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                echo "Creating placeholder results for offline testing..."
                                mkdir -p ${REPORTS_DIR}/android
                                echo "Android benchmarks require connected device" > ${REPORTS_DIR}/android/status.txt
                            fi
                        '''
                    }

                    post {
                        always {
                            // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º Android —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            archiveArtifacts(
                                artifacts: 'benchmark/build/outputs/**/*,macrobenchmark/build/outputs/**/*',
                                allowEmptyArchive: true
                            )

                            // –ü—É–±–ª–∏–∫—É–µ–º Android test —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            publishTestResults(
                                testResultsPattern: 'benchmark/build/outputs/**/TEST-*.xml,macrobenchmark/build/outputs/**/TEST-*.xml'
                            )
                        }
                    }
                }

                stage('JMH –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑') {
                    when {
                        anyOf {
                            expression { params.BENCHMARK_TYPE == 'all' }
                            expression { params.BENCHMARK_TYPE == 'jmh-only' }
                        }
                    }

                    steps {
                        script {
                            echo "‚ö° Running JMH deep performance analysis..."
                        }

                        // –ö–æ–º–ø–∏–ª—è—Ü–∏—è JMH
                        sh '''
                            echo "Building JMH JAR..."
                            ./gradlew jmhJar --info

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ JAR —Ñ–∞–π–ª–∞
                            if [ -f "build/libs/jmh.jar" ]; then
                                echo "‚úÖ JMH JAR created successfully"
                                ls -la build/libs/jmh.jar
                            else
                                echo "‚ùå JMH JAR not found!"
                                exit 1
                            fi
                        '''

                        // –ó–∞–ø—É—Å–∫ JMH –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
                        sh '''
                            echo "Running JMH benchmarks with detailed profiling..."

                            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è CI
                            java -jar build/libs/jmh.jar \\
                                -wi 3 \\
                                -i 5 \\
                                -f 1 \\
                                -r 1s \\
                                -w 1s \\
                                -rf json \\
                                -rff ${REPORTS_DIR}/jmh/jmh-results.json \\
                                -v EXTRA

                            echo "‚úÖ JMH benchmarks completed"
                        '''

                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ JMH —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        sh '''
                            echo "Processing JMH results..."

                            if [ -f "${REPORTS_DIR}/jmh/jmh-results.json" ]; then
                                # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                                python3 << 'PYTHON_SCRIPT'
import json
import sys
import os

try:
    reports_dir = os.environ['REPORTS_DIR']
    results_file = f"{reports_dir}/jmh/jmh-results.json"

    with open(results_file, 'r') as f:
        results = json.load(f)

    # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
    html_report = f"{reports_dir}/jmh/jmh-report.html"
    with open(html_report, 'w') as f:
        f.write("""
<!DOCTYPE html>
<html>
<head>
    <title>JMH Benchmark Results</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        th, td { padding: 10px; text-align: left; border: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        .score { font-weight: bold; color: #2196F3; }
        .error { color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <h1>JMH Benchmark Results</h1>
    <table>
        <tr>
            <th>Benchmark</th>
            <th>Score</th>
            <th>Unit</th>
            <th>Error</th>
            <th>Mode</th>
        </tr>
""")

        print("JMH Results Summary:")
        print("=" * 60)

        for result in results:
            benchmark = result['benchmark']
            score = result['primaryMetric']['score']
            unit = result['primaryMetric']['scoreUnit']
            error = result['primaryMetric']['scoreError']
            mode = result['mode']

            # Console output
            print(f"{benchmark}:")
            print(f"  Score: {score:.2f} ¬± {error:.2f} {unit} ({mode})")

            # HTML table row
            f.write(f"""
        <tr>
            <td>{benchmark}</td>
            <td class="score">{score:.2f}</td>
            <td>{unit}</td>
            <td class="error">¬± {error:.2f}</td>
            <td>{mode}</td>
        </tr>
""")

        f.write("""
    </table>
    <p><small>Generated by Jenkins Performance Pipeline</small></p>
</body>
</html>
""")

    print(f"\\n‚úÖ JMH HTML report created: {html_report}")
    print(f"Total benchmarks processed: {len(results)}")

except Exception as e:
    print(f"Error processing JMH results: {e}")
    sys.exit(1)
PYTHON_SCRIPT
                            else
                                echo "‚ùå JMH results file not found"
                                exit 1
                            fi
                        '''
                    }

                    post {
                        always {
                            // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º JMH —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            archiveArtifacts(
                                artifacts: 'build/libs/jmh.jar,performance-reports/jmh/**/*',
                                allowEmptyArchive: true
                            )
                        }
                    }
                }
            }
        }

        stage('–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏') {
            steps {
                script {
                    echo "üìä Analyzing performance results..."

                    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    def performanceRegression = false
                    def warningThreshold = params.PERFORMANCE_THRESHOLD as Integer

                    echo "Performance threshold: ${warningThreshold}%"
                }

                sh '''
                    echo "Generating comprehensive performance report..."

                    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
                    cat > ${REPORTS_DIR}/performance-summary.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Performance Test Summary - Build ${BUILD_NUMBER}</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .success { border-left: 4px solid #4CAF50; }
        .warning { border-left: 4px solid #FF9800; }
        .error { border-left: 4px solid #F44336; }
        ul { list-style-type: none; padding: 0; }
        li { margin: 5px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ Performance Test Summary</h1>
        <ul>
            <li><strong>Build:</strong> ${BUILD_NUMBER}</li>
            <li><strong>Branch:</strong> ${BRANCH_NAME}</li>
            <li><strong>Job:</strong> ${JOB_NAME}</li>
            <li><strong>Date:</strong> $(date)</li>
        </ul>
    </div>
EOF

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
                    for test_type in jvm android jmh; do
                        echo "<div class=\"section\">" >> ${REPORTS_DIR}/performance-summary.html
                        echo "<h2>${test_type^} Benchmarks</h2>" >> ${REPORTS_DIR}/performance-summary.html

                        if [ -d "${REPORTS_DIR}/${test_type}" ] && [ "$(ls -A ${REPORTS_DIR}/${test_type} 2>/dev/null)" ]; then
                            file_count=$(find ${REPORTS_DIR}/${test_type} -type f | wc -l)
                            echo "<p class=\"success\">‚úÖ Completed successfully ($file_count files generated)</p>" >> ${REPORTS_DIR}/performance-summary.html
                        else
                            echo "<p class=\"warning\">‚ö†Ô∏è No results found or tests skipped</p>" >> ${REPORTS_DIR}/performance-summary.html
                        fi

                        echo "</div>" >> ${REPORTS_DIR}/performance-summary.html
                    done

                    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
                    cat >> ${REPORTS_DIR}/performance-summary.html << 'EOF'

    <div class="section">
        <h2>üéØ Next Steps</h2>
        <ul>
            <li>Download and analyze detailed benchmark artifacts</li>
            <li>Compare with baseline performance metrics</li>
            <li>Investigate any performance regressions</li>
            <li>Update performance baselines if needed</li>
        </ul>
    </div>

    <p><small>Generated automatically by Jenkins Performance Pipeline</small></p>
</body>
</html>
EOF

                    echo "‚úÖ Performance summary report generated"
                '''
            }

            post {
                always {
                    // –ü—É–±–ª–∏–∫—É–µ–º HTML –æ—Ç—á–µ—Ç—ã
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: "${env.REPORTS_DIR}",
                        reportFiles: 'performance-summary.html',
                        reportName: 'Performance Report'
                    ])

                    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
                    archiveArtifacts(
                        artifacts: 'performance-reports/**/*',
                        allowEmptyArchive: true,
                        fingerprint: true
                    )
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üìù Pipeline completed - cleaning up..."
            }

            // –û—á–∏—Å—Ç–∫–∞ workspace (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            cleanWs(
                deleteDirs: true,
                notFailBuild: true,
                patterns: [
                    [pattern: '.gradle', type: 'INCLUDE'],
                    [pattern: 'build/tmp', type: 'INCLUDE']
                ]
            )
        }

        success {
            script {
                echo "‚úÖ Performance testing completed successfully!"

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
                if (env.BRANCH_NAME == 'main') {
                    // Slack, email –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    echo "Performance baseline updated for main branch"
                }
            }
        }

        failure {
            script {
                echo "‚ùå Performance testing failed!"

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if (env.BRANCH_NAME == 'main') {
                    echo "CRITICAL: Performance tests failed on main branch"
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–µ
                }
            }
        }

        unstable {
            script {
                echo "‚ö†Ô∏è Performance testing completed with warnings"
                echo "Check for performance regressions in the artifacts"
            }
        }
    }
}