import kotlin.system.measureTimeMillis
import kotlin.system.measureNanoTime

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ Kotlin
 *
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

object TimeMeasurementsDemo {

    @JvmStatic
    fun main(args: Array<String>) {

        println("üïí –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ Kotlin")
        println("=".repeat(50))

        demonstrateMeasureTimeMillis()
        println()
        demonstrateMeasureNanoTime()
        println()
        demonstrateMonotonicTimeProblem()
        println()
        demonstrateSystemTimeProblem()
        println()
        showCorrectMeasurementTechniques()
        println()
        compareDifferentApproaches()
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è measureTimeMillis
     * ‚ö†Ô∏è –í–ê–ñ–ù–û: measureTimeMillis –∏—Å–ø–æ–ª—å–∑—É–µ—Ç System.currentTimeMillis() - –ù–ï–º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!
     * –ú–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ NTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     * –•–æ—Ä–æ—à–æ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é > 1–º—Å (–Ω–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å measureNanoTime)
     */
    private fun demonstrateMeasureTimeMillis() {
        println("üìè measureTimeMillis - –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π > 1–º—Å")
        println("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç System.currentTimeMillis() - –Ω–µ–º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!")
        println("-".repeat(40))

        // –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - –ø–ª–æ—Ö–æ–π –∫–µ–π—Å –¥–ª—è measureTimeMillis
        val fastOperationTime = measureTimeMillis {
            var sum = 0L // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è dead code elimination
            repeat(1000) {
                sum += it * it + it
            }
            sum // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        }
        println("‚ö†Ô∏è –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${fastOperationTime}–º—Å (–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å 0–º—Å!)")

        // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - —Ö–æ—Ä–æ—à–∏–π –∫–µ–π—Å
        val slowOperationTime = measureTimeMillis {
            Thread.sleep(50) // 50–º—Å
            var sum = 0.0
            repeat(100_000) {
                val dummy = Math.sqrt(it.toDouble())
                sum+=dummy
            }
            println(sum)
        }
        println("‚úÖ –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${slowOperationTime}–º—Å")

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        println("\nüîÑ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –±—ã—Å—Ç—Ä–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        repeat(10) { run ->
            val time = measureTimeMillis {
                var sum = 0L // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è dead code elimination
                repeat(1000) {
                    sum += it * it * it
                }
                sum // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            }
            print("$time ")
        }
        println("–º—Å")
        println("üëÄ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–Ω–æ–≥–æ –Ω—É–ª–µ–π –∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å!")
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è measureNanoTime
     * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    private fun demonstrateMeasureNanoTime() {
        println("‚ö° measureNanoTime - –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        println("-".repeat(40))

        // –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        val fastOperationNano = measureNanoTime {
            var sum = 0L // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è dead code elimination
            repeat(1000) {
                sum += it * it + it
            }
            sum // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        }
        println("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${fastOperationNano}–Ω—Å = ${fastOperationNano/1_000_000.0}–º—Å")

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
        println("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        println("measureTimeMillis vs measureNanoTime")

        repeat(5) { run ->
            val millis = measureTimeMillis {
                var sum = 0L
                repeat(500) {
                    sum += it * it + it / 2
                }
                sum
            }

            val nanos = measureNanoTime {
                var sum = 0L
                repeat(500) {
                    sum += it * it + it / 2
                }
                sum
            }

            println("–ü–æ–ø—ã—Ç–∫–∞ ${run + 1}: ${millis}–º—Å vs ${nanos}–Ω—Å (${String.format("%.3f", nanos/1_000_000.0)}–º—Å)")
        }
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
     * System.currentTimeMillis() –º–æ–∂–µ—Ç "–ø—Ä—ã–≥–∞—Ç—å" –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun demonstrateMonotonicTimeProblem() {
        println("‚è∞ –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        println("-".repeat(40))

        println("‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: System.currentTimeMillis()")
        println("–ü—Ä–æ–±–ª–µ–º—ã:")
        println("1. –ú–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
        println("2. –ú–æ–∂–µ—Ç –∏–¥—Ç–∏ –Ω–∞–∑–∞–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        println("3. –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è")

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        val wrongMeasurement = demonstrateWrongTimeMeasurement()
        println("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${wrongMeasurement}–º—Å")

        println("\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: System.nanoTime()")
        println("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
        println("1. –ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–µ –≤—Ä–µ–º—è")
        println("2. –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        println("3. –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (–Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã)")

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        val correctMeasurement = demonstrateCorrectTimeMeasurement()
        println("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${correctMeasurement/1_000_000.0}–º—Å")
    }

    /**
     * –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ System.currentTimeMillis()
     */
    private fun demonstrateWrongTimeMeasurement(): Long {
        val startTime = System.currentTimeMillis()

        // –ù–µ–∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞
        var sum = 0.0 // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è dead code elimination
        repeat(10_000) {
            sum += Math.sqrt(it.toDouble()) + Math.sin(it.toDouble())
        }
        // sum –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—è–≤–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

        val endTime = System.currentTimeMillis()
        return endTime - startTime
    }

    /**
     * –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ System.nanoTime()
     */
    private fun demonstrateCorrectTimeMeasurement(): Long {
        val startTime = System.nanoTime()

        // –¢–∞ –∂–µ —Ä–∞–±–æ—Ç–∞
        var sum = 0.0 // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è dead code elimination
        repeat(10_000) {
            sum += Math.sqrt(it.toDouble()) + Math.sin(it.toDouble())
        }
        // sum –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—è–≤–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

        val endTime = System.nanoTime()
        return endTime - startTime
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
     */
    private fun demonstrateSystemTimeProblem() {
        println("üö® –ü—Ä–æ–±–ª–µ–º—ã —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        println("-".repeat(40))

        println("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–≥–¥–∞ System.currentTimeMillis() –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        println("1. üåê NTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –≤—Ä–µ–º—è –º–æ–∂–µ—Ç \"–ø—Ä—ã–≥–Ω—É—Ç—å\" –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
        println("2. ‚è∞ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è - —á–∞—Å –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å—Å—è")
        println("3. üîß –†—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        println("4. üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —á–∞—Å–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")

        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
        println("\nüí° –ü—Ä–∏–º–µ—Ä –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã:")
        simulateTimeJumpProblem()
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä—ã–∂–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun simulateTimeJumpProblem() {
        println("–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ –≤–æ –≤—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è NTP...")

        val measurements = mutableListOf<Long>()

        repeat(10) {
            val time = measureTimeMillis {
                Thread.sleep(10) // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π "–ø—Ä—ã–∂–æ–∫" –≤—Ä–µ–º–µ–Ω–∏
                if (it == 5) {
                    println("  üí• [–°–∏–º—É–ª—è—Ü–∏—è] –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç NTP —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –≤—Ä–µ–º—è –Ω–∞ -2 —Å–µ–∫!")
                    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å System.currentTimeMillis() –º–æ–∂–µ—Ç –¥–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                }

                var volatileSum = 0L
                repeat(1000) { j ->
                    volatileSum = (j * j + j).toLong() // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                }
            }
            measurements.add(time)
            println("  –ò–∑–º–µ—Ä–µ–Ω–∏–µ ${it + 1}: ${time}–º—Å")
        }

        println("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π: ${measurements}")
        println("üëÄ –í–∏–¥–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É? –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ –∏–∑ –∏–∑–º–µ—Ä–µ–Ω–∏–π –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
    }

    /**
     * –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun showCorrectMeasurementTechniques() {
        println("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        println("-".repeat(40))

        println("1. ‚ö†Ô∏è measureTimeMillis –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ù–ï–ú–û–ù–û–¢–û–ù–ù–û–ï –≤—Ä–µ–º—è (System.currentTimeMillis)!")
        println("   –ú–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ NTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        println("2. ‚ö° –ü–†–ï–î–ü–û–ß–ò–¢–ê–ô–¢–ï measureNanoTime - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!")
        println("3. üîÑ –î–µ–ª–∞–π—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —É—Å—Ä–µ–¥–Ω—è–π—Ç–µ")
        println("4. üî• –ü—Ä–æ–≥—Ä–µ–≤–∞–π—Ç–µ JVM –ø–µ—Ä–µ–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏")

        println("\nüìè –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")

        // –ü—Ä–æ–≥—Ä–µ–≤ JVM
        println("üî• –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º JVM...")
        repeat(1000) {
            performTestOperation()
        }

        // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        println("\nüìä –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:")
        val measurements = mutableListOf<Long>()

        repeat(10) {
            val time = measureNanoTime {
                performTestOperation()
            }
            measurements.add(time)
            println("  –ò–∑–º–µ—Ä–µ–Ω–∏–µ ${it + 1}: ${String.format("%.3f", time/1_000_000.0)}–º—Å")
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        val avgTime = measurements.average()
        val minTime = measurements.minOrNull() ?: 0
        val maxTime = measurements.maxOrNull() ?: 0

        println("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        println("  –°—Ä–µ–¥–Ω–µ–µ: ${String.format("%.3f", avgTime/1_000_000.0)}–º—Å")
        println("  –ú–∏–Ω–∏–º—É–º: ${String.format("%.3f", minTime/1_000_000.0)}–º—Å")
        println("  –ú–∞–∫—Å–∏–º—É–º: ${String.format("%.3f", maxTime/1_000_000.0)}–º—Å")
        println("  –†–∞–∑–±—Ä–æ—Å: ${String.format("%.3f", (maxTime-minTime)/1_000_000.0)}–º—Å")
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
     */
    private fun performTestOperation() {
        var sum = 0.0 // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è dead code elimination
        repeat(5000) {
            sum += it * it + it / 2 + Math.sqrt(it.toDouble())
        }
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        if (sum < 0) println("Unexpected negative sum")
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun compareDifferentApproaches() {
        println("‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤")
        println("-".repeat(40))

        println("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...")
        val testOperation = {
            var sum = 0.0 // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è dead code elimination
            repeat(50_000) {
                sum += Math.sin(it.toDouble()) + Math.cos(it.toDouble())
            }
            sum // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        }

        // 1. measureTimeMillis
        val millisTime = measureTimeMillis { testOperation() }

        // 2. measureNanoTime
        val nanoTime = measureNanoTime { testOperation() }

        // 3. –†—É—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ System.nanoTime()
        val manualStart = System.nanoTime()
        testOperation()
        val manualEnd = System.nanoTime()
        val manualTime = manualEnd - manualStart

        println("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        println("  measureTimeMillis: ${millisTime}–º—Å")
        println("  measureNanoTime:   ${String.format("%.3f", nanoTime/1_000_000.0)}–º—Å (${nanoTime}–Ω—Å)")
        println("  –†—É—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ:  ${String.format("%.3f", manualTime/1_000_000.0)}–º—Å (${manualTime}–Ω—Å)")

        println("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        println("  ‚Ä¢ –î–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (<1–º—Å): measureNanoTime (–º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)")
        println("  ‚Ä¢ –î–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (>1–º—Å): measureNanoTime (–ù–ï measureTimeMillis!)")
        println("  ‚Ä¢ ‚ö†Ô∏è measureTimeMillis –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è - –∏–∑–±–µ–≥–∞–π—Ç–µ!")
        println("  ‚Ä¢ –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        println("  ‚Ä¢ –î–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JMH (Java Microbenchmark Harness)")
    }
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
 */
private operator fun String.times(n: Int): String = this.repeat(n)