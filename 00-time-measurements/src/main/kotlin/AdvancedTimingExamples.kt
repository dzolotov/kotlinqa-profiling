import kotlin.system.measureTimeMillis
import kotlin.system.measureNanoTime

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–æ–Ω–∫–æ—Å—Ç–∏ –∏ –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏
 */
object AdvancedTimingExamples {

    @JvmStatic
    fun main(args: Array<String>) {
        println("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        println("=" * 50)

        demonstrateWarmupImportance()
        println()
        demonstrateGCInterference()
        println()
        demonstrateResolutionLimits()
        println()
        demonstrateStatisticalApproach()
        println()
        showRealWorldScenarios()
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ JVM
     */
    private fun demonstrateWarmupImportance() {
        println("üî• –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞ JVM")
        println("-".repeat(30))

        val operation = {
            // –û–ø–µ—Ä–∞—Ü–∏—è —Å –∫–ª–∞—Å—Å–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ JVM –Ω—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            val list = mutableListOf<Double>()
            repeat(10_000) {
                list.add(Math.sqrt(it.toDouble()))
                if (it % 1000 == 0) {
                    list.clear()
                    list.add(Math.sin(it.toDouble()))
                }
            }
            list.size
        }

        println("‚ùÑÔ∏è –ë–ï–ó –ø—Ä–æ–≥—Ä–µ–≤–∞ (—Ö–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç):")
        repeat(5) { iteration ->
            val time = measureNanoTime { operation() }
            println("  –ü–æ–ø—ã—Ç–∫–∞ ${iteration + 1}: ${String.format("%.2f", time/1_000_000.0)}–º—Å")
        }

        println("\nüî• –ü–†–û–ì–†–ï–í (100 –∏—Ç–µ—Ä–∞—Ü–∏–π)...")
        repeat(100) { operation() }

        println("\nüöÄ –ü–û–°–õ–ï –ø—Ä–æ–≥—Ä–µ–≤–∞:")
        repeat(5) { iteration ->
            val time = measureNanoTime { operation() }
            println("  –ü–æ–ø—ã—Ç–∫–∞ ${iteration + 1}: ${String.format("%.2f", time/1_000_000.0)}–º—Å")
        }

        println("\nüí° –ó–∞–º–µ—Ç—å—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É! JVM –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞.")
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∏—è–Ω–∏—è Garbage Collector
     */
    private fun demonstrateGCInterference() {
        println("üóëÔ∏è –í–ª–∏—è–Ω–∏–µ Garbage Collector")
        println("-".repeat(30))

        println("–í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é, —Å–æ–∑–¥–∞—é—â—É—é –º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤...")

        val measurements = mutableListOf<Long>()

        repeat(20) { iteration ->
            val time = measureNanoTime {
                // –û–ø–µ—Ä–∞—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è –º–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞
                val bigList = mutableListOf<String>()
                repeat(50_000) {
                    bigList.add("–°—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä $it —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
                    if (it % 10_000 == 0) {
                        // –°–æ–∑–¥–∞–µ–º –µ—â–µ –±–æ–ª—å—à–µ –æ–±—ä–µ–∫—Ç–æ–≤
                        val tempList = bigList.map { s -> s.uppercase() }
                    }
                }
                bigList.size
            }

            measurements.add(time)
            val timeMs = time / 1_000_000.0
            val marker = if (timeMs > measurements.take(5).average() / 1_000_000.0 * 2) " üóëÔ∏è GC?" else ""
            println("  –ò–∑–º–µ—Ä–µ–Ω–∏–µ ${String.format("%2d", iteration + 1)}: ${String.format("%6.2f", timeMs)}–º—Å$marker")
        }

        val avg = measurements.average() / 1_000_000.0
        val outliers = measurements.filter { it / 1_000_000.0 > avg * 1.5 }

        println("\nüìä –ê–Ω–∞–ª–∏–∑:")
        println("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${String.format("%.2f", avg)}–º—Å")
        println("  –í—ã–±—Ä–æ—Å—ã (>150% —Å—Ä–µ–¥–Ω–µ–≥–æ): ${outliers.size}")
        println("  üí° –í—ã–±—Ä–æ—Å—ã –æ–±—ã—á–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∞–±–æ—Ç–æ–π GC")
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun demonstrateResolutionLimits() {
        println("üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        println("-".repeat(30))

        println("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:")

        // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        val fastOperation = {
            var sum = 0
            for (i in 1..100) {
                sum += i
            }
            sum
        }

        // –ò–∑–º–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        println("\nmeasureTimeMillis (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ~1–º—Å):")
        repeat(10) { i ->
            val time = measureTimeMillis { fastOperation() }
            print("$time ")
        }
        println("–º—Å")

        println("\nmeasureNanoTime (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ~–Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã):")
        repeat(10) { i ->
            val time = measureNanoTime { fastOperation() }
            print("${time} ")
        }
        println("–Ω—Å")

        println("\nüîç –ò—Å—Å–ª–µ–¥—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ System.nanoTime():")
        val resolution = measureTimeResolution()
        println("  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–∏–º–æ–µ –≤—Ä–µ–º—è: ${resolution}–Ω—Å")

        if (resolution > 1000) {
            println("  ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ö—É–∂–µ 1–º–∫—Å - –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏!")
        } else {
            println("  ‚úÖ –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–∏–∫—Ä–æ–±–µ–Ω—á–º–∞—Ä–∫–æ–≤")
        }
    }

    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è System.nanoTime()
     */
    private fun measureTimeResolution(): Long {
        var minDiff = Long.MAX_VALUE
        var prevTime = System.nanoTime()

        repeat(1000) {
            val currentTime = System.nanoTime()
            val diff = currentTime - prevTime
            if (diff > 0 && diff < minDiff) {
                minDiff = diff
            }
            prevTime = currentTime
        }

        return minDiff
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
     */
    private fun demonstrateStatisticalApproach() {
        println("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥")
        println("-".repeat(30))

        val testOperation = {
            // –û–ø–µ—Ä–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            val random = kotlin.random.Random
            repeat(random.nextInt(5000, 15000)) {
                val dummy = Math.sqrt(it.toDouble()) + Math.sin(it * random.nextDouble())
            }
        }

        println("–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ 50 –∏–∑–º–µ—Ä–µ–Ω–∏—è–º...")
        val measurements = mutableListOf<Double>()

        // –ü—Ä–æ–≥—Ä–µ–≤
        repeat(20) { testOperation() }

        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        repeat(50) {
            val time = measureNanoTime { testOperation() } / 1_000_000.0
            measurements.add(time)
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        val sorted = measurements.sorted()
        val mean = measurements.average()
        val median = sorted[sorted.size / 2]
        val q1 = sorted[sorted.size / 4]
        val q3 = sorted[sorted.size * 3 / 4]
        val min = sorted.first()
        val max = sorted.last()
        val stdDev = kotlin.math.sqrt(measurements.map { (it - mean) * (it - mean) }.average())

        println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ –º—Å):")
        println("  –°—Ä–µ–¥–Ω–µ–µ:     ${String.format("%6.3f", mean)}")
        println("  –ú–µ–¥–∏–∞–Ω–∞:     ${String.format("%6.3f", median)}")
        println("  –ú–∏–Ω:         ${String.format("%6.3f", min)}")
        println("  –ú–∞–∫—Å:        ${String.format("%6.3f", max)}")
        println("  Q1:          ${String.format("%6.3f", q1)}")
        println("  Q3:          ${String.format("%6.3f", q3)}")
        println("  –°—Ç.–æ—Ç–∫–ª:     ${String.format("%6.3f", stdDev)}")
        println("  –ö–æ—ç—Ñ.–≤–∞—Ä:    ${String.format("%6.1f", (stdDev/mean)*100)}%")

        // –í—ã–±—Ä–æ—Å—ã
        val iqr = q3 - q1
        val lowerBound = q1 - 1.5 * iqr
        val upperBound = q3 + 1.5 * iqr
        val outliers = measurements.filter { it < lowerBound || it > upperBound }

        println("  –í—ã–±—Ä–æ—Å—ã:     ${outliers.size} (${String.format("%.1f", outliers.size.toDouble()/measurements.size*100)}%)")

        if (stdDev / mean > 0.2) {
            println("  ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å! –í–æ–∑–º–æ–∂–Ω—ã –ø–æ–º–µ—Ö–∏.")
        } else {
            println("  ‚úÖ –ü—Ä–∏–µ–º–ª–µ–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π.")
        }
    }

    /**
     * –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    private fun showRealWorldScenarios() {
        println("üåç –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        println("-".repeat(30))

        println("1. üìÅ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:")
        measureFileOperation()

        println("\n2. üîÑ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
        measureJSONParsing()

        println("\n3. üßÆ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:")
        measureAlgorithmPerformance()
    }

    private fun measureFileOperation() {
        // –°–∏–º—É–ª—è—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        val time = measureTimeMillis {
            Thread.sleep(kotlin.random.Random.nextLong(10, 50)) // 10-50–º—Å
            repeat(1000) {
                val content = "–°–∏–º—É–ª—è—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å—Ç—Ä–æ–∫–∞ $it"
                content.length // –û–±—Ä–∞–±–æ—Ç–∫–∞
            }
        }
        println("  –í—Ä–µ–º—è '—á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞': ${time}–º—Å")

        if (time < 5) {
            println("  üí° –î–ª—è —Ç–∞–∫–∏—Ö –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å measureNanoTime")
        }
    }

    private fun measureJSONParsing() {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        val jsonData = """{"users":[{"name":"User1","age":25},{"name":"User2","age":30}]}"""

        val time = measureNanoTime {
            // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π "–ø–∞—Ä—Å–∏–Ω–≥"
            val userCount = jsonData.count { it == '{' } - 1 // -1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            repeat(userCount * 1000) {
                val dummy = jsonData.hashCode() + it
            }
        }

        println("  –í—Ä–µ–º—è '–ø–∞—Ä—Å–∏–Ω–≥–∞ JSON': ${String.format("%.3f", time/1_000_000.0)}–º—Å")
    }

    private fun measureAlgorithmPerformance() {
        val data = (1..10000).toList().shuffled()

        // –ò–∑–º–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        val sortTime = measureNanoTime {
            data.sorted()
        }

        // –ò–∑–º–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
        val searchTime = measureNanoTime {
            data.find { it == 5000 }
        }

        println("  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ 10k —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${String.format("%.3f", sortTime/1_000_000.0)}–º—Å")
        println("  –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: ${String.format("%.3f", searchTime/1_000.0)}–º–∫—Å")

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        val sortedData = data.sorted()
        val binarySearchTime = measureNanoTime {
            sortedData.binarySearch(5000)
        }
        println("  –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫: ${String.format("%.3f", binarySearchTime/1_000.0)}–º–∫—Å")

        val speedup = searchTime.toDouble() / binarySearchTime
        println("  üöÄ –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±—ã—Å—Ç—Ä–µ–µ –≤ ${String.format("%.1f", speedup)} —Ä–∞–∑")
    }
}

private operator fun String.times(n: Int): String = this.repeat(n)