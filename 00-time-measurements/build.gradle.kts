plugins {
    kotlin("jvm") version "2.2.20"
    application
}

group = "com.example"
version = "1.0.0"

repositories {
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib"))
}

kotlin {
    jvmToolchain(17)
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// –¢–∞—Å–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
tasks.register<JavaExec>("runBasicDemo") {
    group = "application"
    description = "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"
    classpath = sourceSets["main"].runtimeClasspath
    mainClass.set("TimeMeasurementsDemo")

    // JVM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    jvmArgs = listOf(
        "-XX:+UnlockExperimentalVMOptions",
        "-XX:+UseG1GC",
        "-XX:MaxGCPauseMillis=200",
        "-Xmx1g",
        "-Xms512m"
    )
}

// –¢–∞—Å–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
tasks.register<JavaExec>("runAdvancedDemo") {
    group = "application"
    description = "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"
    classpath = sourceSets["main"].runtimeClasspath
    mainClass.set("AdvancedTimingExamples")

    // JVM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    jvmArgs = listOf(
        "-XX:+UnlockExperimentalVMOptions",
        "-XX:+UseG1GC",
        "-XX:MaxGCPauseMillis=200",
        "-Xmx1g",
        "-Xms512m"
    )
}

// –¢–∞—Å–∫ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ JAR —Ñ–∞–π–ª–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
tasks.jar {
    manifest {
        attributes["Main-Class"] = "TimeMeasurementsDemo"
    }
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö JAR —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
tasks.register<Jar>("basicDemoJar") {
    group = "build"
    description = "–°–æ–∑–¥–∞–Ω–∏–µ JAR –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"
    archiveClassifier.set("basic")
    manifest {
        attributes["Main-Class"] = "TimeMeasurementsDemo"
    }
    from(sourceSets["main"].output)
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register<Jar>("advancedDemoJar") {
    group = "build"
    description = "–°–æ–∑–¥–∞–Ω–∏–µ JAR –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"
    archiveClassifier.set("advanced")
    manifest {
        attributes["Main-Class"] = "AdvancedTimingExamples"
    }
    from(sourceSets["main"].output)
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ application plugin
application {
    mainClass.set("TimeMeasurementsDemo")

    // JVM –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
    applicationDefaultJvmArgs = listOf(
        "-XX:+UnlockExperimentalVMOptions",
        "-XX:+UseG1GC",
        "-XX:MaxGCPauseMillis=200",
        "-Xmx1g",
        "-Xms512m"
    )
}

// –¢–∞—Å–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥
tasks.register("runAllDemos") {
    group = "application"
    description = "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"
    dependsOn("runBasicDemo", "runAdvancedDemo")

    doLast {
        println("\n" + "=".repeat(60))
        println("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        println("=".repeat(60))
        println("\nüìã –ß—Ç–æ –º—ã –∏–∑—É—á–∏–ª–∏:")
        println("‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É measureTimeMillis –∏ measureNanoTime")
        println("‚Ä¢ –ü—Ä–æ–±–ª–µ–º—É –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (System.currentTimeMillis vs System.nanoTime)")
        println("‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞ JVM –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        println("‚Ä¢ –í–ª–∏—è–Ω–∏–µ Garbage Collector –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        println("‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º")
        println("‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        println("\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–∑—É—á–µ–Ω–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è!")
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
tasks.withType<JavaExec> {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä–µ–≤–∞ JVM
    systemProperty("warmup.iterations", "1000")

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    systemProperty("java.awt.headless", "true")

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—è–≤–Ω–æ–≥–æ GC –≤–æ –≤—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
    jvmArgs("-XX:+DisableExplicitGC")
}